from cuerpo_finito import G_F
from aes import AES

# Key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
# Key = [0x18, 0xaf, 0x15, 0x92, 0x4d, 0xe9, 0x33, 0xb0, 0x02, 0x45, 0x9b, 0x1c, 0x14, 0xd3, 0x6d, 0x0f]
# Key = [0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05]

"Poliniomio 0x11b Mandril"
# pol = 0x11b
# Key = [0x18, 0x4d, 0x02, 0x14, 0xaf, 0xe9, 0x45, 0xd3, 0x15, 0x33, 0x9b, 0x6d, 0x92, 0xb0, 0x1c, 0x0f]

"Polinomio 0x11d Mandril"
# pol = 0x11d
# Key = [0xa2, 0x6d, 0x65, 0xfd, 0xd2, 0xfe, 0xa3, 0x02, 0x63, 0x82, 0x90, 0xcd, 0xd2, 0xcb, 0xf6, 0x26]

"POLINOMIO 0x177"
pol = 0x177

"- Clave 128 bits -"
Key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

"- Clave 192 bits -"
# Key = [0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 
#         0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b]

"- Clave 256 bits -"
# Key = [0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 
#         0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4]

# ------------------------------------------------------------------------------------------------------------------------

algorithm = AES(key=Key, polinomio_irreducible=pol)

State = [
    [0x19, 0xa0, 0x9a, 0xe9],
    [0x3d, 0xf4, 0xc6, 0xf8], 
    [0xe3, 0xe2, 0x8d, 0x48],
    [0xbe, 0x2b, 0x2a, 0x08]
]


def test_steps(State):
    AES.print_matrix(State)
    print()

    SubBytes_state = algorithm.SubBytes(State)
    AES.print_matrix(SubBytes_state)
    print()

    # InvSBytes_states = algorithm.InvSubBytes(SubBytes_state)
    # AES.print_matrix(InvSBytes_states)
    # print()

    ShiftRows_state = algorithm.ShiftRows(SubBytes_state)
    AES.print_matrix(ShiftRows_state)
    print()

    # InvSRow_state = algorithm.InvShiftRows(ShiftRows_state)
    # AES.print_matrix(InvSRow_state)
    # print()

    MixColumns_state = algorithm.MixColumns(ShiftRows_state)
    AES.print_matrix(MixColumns_state)
    print()

    # InvMCol_state = algorithm.InvMixColumns(MixColumns_state)
    # AES.print_matrix(InvMCol_state)

    AddRoundKey_state = algorithm.AddRoundKey(MixColumns_state, algorithm.expanded_key[0])
    AES.print_matrix(AddRoundKey_state)
    print()


def test_key_expansion():
    for i in algorithm.expanded_key:
        AES.print_matrix(i)
        print()


def test_cipher(state):
    print("STATE")
    AES.print_matrix(state)
    print()

    cipher_state = algorithm.Cipher(state, algorithm.Nr, algorithm.expanded_key)
    print("CIPHER STATE")
    AES.print_matrix(cipher_state)
    print()

    invcipher_state = algorithm.InvCipher(cipher_state, algorithm.Nr, algorithm.expanded_key)
    print("DECIPHERED STATE")
    AES.print_matrix(invcipher_state)
    print()


State_to_cipher = [
    [0x32, 0x88, 0x31, 0xe0],
    [0x43, 0x5a, 0x31, 0x37],
    [0xf6, 0x30, 0x98, 0x07],
    [0xa8, 0x8d, 0xa2, 0x34]
]

# test_steps(State)
# test_key_expansion()
test_cipher(State_to_cipher)

# algorithm.encrypt_file('./ValoresTest/Test/mandril.png')
# algorithm.decrypt_file('./ValoresTest/Test/mandril.png.enc')